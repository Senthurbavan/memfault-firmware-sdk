config MEMFAULT
        bool "MEMFAULT Support"
        default n
        depends on CPU_CORTEX_M
        select RUNTIME_NMI
        select EXTRA_EXCEPTION_INFO
        select OPENOCD_SUPPORT
        help
          Enable Zephyr Integration with the Memfault SDK
          At the moment a port is only provided for Cortex-M based targets

if MEMFAULT

config MEMFAULT_RAM_BACKED_COREDUMP
        bool "MEMFAULT Ram Backed Coredump"
        default y
        help
          Save a minimal coredump in RAM.

config MEMFAULT_RAM_BACKED_COREDUMP_SIZE
        int "MEMFAULT Ram Backed Coredump"
        default 8192
        depends on MEMFAULT_RAM_BACKED_COREDUMP
        help
          Save a minimal coredump in RAM.

config MEMFAULT_SHELL
        bool "MEMFAULT Shell"
        default y
        select SHELL
        help
          CLI Utilities for interfacing with the Memfault SDK

config MEMFAULT_HTTP_ENABLE
        bool "MEMFAULT Http Enable"
        default y if BOARD_NRF9160DK_NRF9160NS || BOARD_THINGY91_NRF9160NS
        help
          Adds support for querying the Memfault API for OTA updates
          and posting Memfault chunks

choice
    bool "Implementation used to store Memfault Root certificates"
    default MEMFAULT_ROOT_CERT_STORAGE_NRF9160_MODEM if BOARD_NRF9160DK_NRF9160NS || BOARD_THINGY91_NRF9160NS
    default MEMFAULT_ROOT_CERT_STORAGE_TLS_CREDENTIAL_STORAGE

config MEMFAULT_ROOT_CERT_STORAGE_NRF9160_MODEM
    bool "Uses the storage on the NRF9160 modem for storing root certificates"

config MEMFAULT_ROOT_CERT_STORAGE_TLS_CREDENTIAL_STORAGE
    bool "Uses Zephyr's tls_credential_add() API for storing root certificates"

config MEMFAULT_ROOT_CERT_STORAGE_CUSTOM
    bool "Provide a custom implementation of memfault_root_cert_storage_add()"

endchoice

if MEMFAULT_HTTP_ENABLE

config MEMFAULT_HTTP_MAX_POST_SIZE
        int "Set the Maximum HTTP Body Size Memfault will use in a POST request"
        default 0
        depends on MEMFAULT_HTTP_ENABLE
        help
          Some network drivers have bugs which limit the maximum amount of
          data that can be sent in a single HTTP request. When the value is 0 (default),
          no size restriction on HTTP post size will be enforced. For a non-zero value,
          this will be the maximum body length of a posted check. This size is allocated
          on the stack posting the data.

config MEMFAULT_HTTP_PERIODIC_UPLOAD
        bool "Enables a work job to periodically push new data to Memfault"
        default n
        help
          This implementation makes use of a k_timer_* and k_work_submit to schedule
          a background job that periodically checks to see if new Memfault data
          is available and pushes it to Memfault if so (via a HTTP POST). When using
          this feature, make sure CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE is set appropriately
          for the boards HTTP stack to not cause a stack overflow.

if MEMFAULT_HTTP_PERIODIC_UPLOAD

config MEMFAULT_HTTP_PERIODIC_UPLOAD_INTERVAL_SECS
        int "Frequency at which the periodic upload task should run"
        default 3600
        help
          The first check will run between [1, 1+MEMFAULT_HTTP_PERIODIC_UPLOAD_INTERVAL_SECS]
          Subsequent checks will run at MEMFAULT_HTTP_PERIODIC_UPLOAD_INTERVAL_SECS intervals.

endif # MEMFAULT_HTTP_PERIODIC_UPLOAD

endif # MEMFAULT_HTTP_ENABLE

config MEMFAULT_EVENT_STORAGE_SIZE
       int "Memfault Event Storage RAM Buffer Size"
       default 1024
       help
        The storage area used to batch memfault events before they are flushed
        to persistent storage or the Memfault Cloud.

config MEMFAULT_COREDUMP_STACK_SIZE_TO_COLLECT
       int "Maximum amount of bytes to collect for task"
       default 256
       help
        The larger the size, the more stack frames Memfault can recover for tasks. The
        default setting typically allows for 4 or more frames to be recovered.

config MEMFAULT_COREDUMP_MAX_TRACKED_TASKS
       int "Maximum amount of tasks to collect in a coredump"
       default 16
       help
        The maximum amount of tasks Memfault will store state for in a coredump.

config MEMFAULT_DEFAULT_REBOOT_REASON_IMPL
       bool "Port provided implementation used to decode MCU Reset Register"
       default y
       help
        User of SDK must provide their own implementation of memfault_reboot_reason_get()
        when disabled

config MEMFAULT_CLEAR_RESET_REG
       bool "Whether or not to clear bits in MCU reset reason register"
       depends on MEMFAULT_DEFAULT_REBOOT_REASON_IMPL
       default y
       help
        When disabled, the end user is responsible for clearing the reset register. (Bits
        generally persist across resets)

config MEMFAULT_METRICS
       bool "Enable the memfault Metrics subsystem"
       default y

if MEMFAULT_METRICS

config MEMFAULT_METRICS_TIMER_CUSTOM
       bool "Provide a custom implementation of Memfault Metric Deps"
       default n
       help
        By default the Memfault SDK makes use of Zephyrs k_timer_* to
        schedule the heartbeat timer and k_work_* to run the heartbeat callback
        work. This option can be used to disable that implementation and specify
        a custom implementation of memfault_platform_metrics_timer_boot()

endif # MEMFAULT_METRICS

endif # MEMFAULT